#include <iostream>
using namespace std;

void swap(int arr[], int i, int j)
{
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}
// function to heapify the tree
void heapify(int arr[], int n, int root)
{
   // build heapify
    int largest = root;
    int left_child = 2*root+1;
    int right_child = 2*root+2;

    if ((left_child<n)&&(arr[left_child]>arr[largest]))
    {
        largest = left_child;
    }

    if ((right_child<n)&&(arr[right_child]>arr[largest]))
    {
        largest = right_child;
    }
    if (largest!=root)
    {
        swap(arr,root,largest);
        heapify(arr,n,largest);
    }


}

// implementing heap sort
void heapSort(int arr[], int n)
{
   // build heap
   for (int i=n/2-1;i>=0;i--)
   {
       heapify(arr,n,i);
   }


   // extracting elements from heap one by one
   for (int i=0;i<n;i++)
   {
       swap(arr,0,n-1-i);
       heapify(arr,n-1-i,0);
   }

}

/* print contents of array */
void displayArray(int arr[], int n)
{
   for (int i=0; i<n; ++i)
   cout << arr[i] << " ";
   cout << "\n";
}

// main program
int main()
{
    int arr_size;
    cin>>arr_size;
    int heap_arr[arr_size];
    int element;
    for (int i=0;i<arr_size;i++)
    {
        cin>>element;
        heap_arr[i] = element;
    }

   //int heap_arr[] = {4,17,3,12,9,6};
   int n = sizeof(heap_arr)/sizeof(heap_arr[0]);
   cout<<endl;
   cout<<"Input array"<<endl;
   displayArray(heap_arr,n);

   heapSort(heap_arr, n);

   cout << "Sorted array"<<endl;
   displayArray(heap_arr, n);
}
