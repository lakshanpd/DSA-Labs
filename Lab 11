#include <iostream>
#include <vector>
#include <limits>
#include <queue>
using namespace std;

#define MAX 6

//checking the existence of an element in a vector array
bool search(vector<int> arr, int x)
{
    for (int i : arr)
    {
        if (i==x)
        {
            return true;
        }
    }
    return false;
}

//adding edges to the graph
void add_edges(vector<vector<pair<int,int>>> &edges, int node1, int node2, int weight)
{
    edges[node1].push_back(make_pair(weight,node2));
    edges[node2].push_back(make_pair(weight,node1));
}

//implementing prim's algorithm
int prims_algorithm(vector<vector<pair<int,int>>> edges, int source)
{
    int cost = 0;
    vector<int> result;
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
 
    result.push_back(source);
    cout<<"starting node is  "<<source<<endl;

    for (pair<int,int> couple : edges[source])
    {       
        pq.push(couple);
    }

    while (!pq.empty())
    {
        //get the least weight edge that connected to current tree
        int node = pq.top().second;        
        int weight = pq.top().first;
        pq.pop();
        
        //check whether the node is already visited
        if (!search(result,node))
        {
            cout<<"makes an edge with  "<<node<<endl;
            result.push_back(node);
            cost += weight;
        }

        for (pair<int,int> couple : edges[node])
        {
            //adding neighbours of the node into pq if they aren't already visited
            if (!search(result,couple.second))
            {        
                pq.push(couple);
            }
        }     
    }
    return cost;
}

int main()
{
    vector<vector<pair<int,int>>> edges(MAX);   //MAX=6
    
    //create the graph
    add_edges(edges,0,1,3);
    add_edges(edges,1,2,2);
    add_edges(edges,2,3,3);
    add_edges(edges,5,4,4);
    add_edges(edges,0,5,1);
    add_edges(edges,5,2,5);
    add_edges(edges,1,4,10);
    add_edges(edges,1,3,1);
    add_edges(edges,3,4,5);
    
    int cost = prims_algorithm(edges,0);
    cout<<endl;
    cout<<"cost of MST is ";
    cout<<cost;
    
}
